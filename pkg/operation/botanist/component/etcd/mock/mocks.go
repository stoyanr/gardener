// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/operation/botanist/component/etcd (interfaces: Etcd)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	kubernetes "github.com/gardener/gardener/pkg/client/kubernetes"
	etcd "github.com/gardener/gardener/pkg/operation/botanist/component/etcd"
	gomock "github.com/golang/mock/gomock"
)

// MockEtcd is a mock of Etcd interface.
type MockEtcd struct {
	ctrl     *gomock.Controller
	recorder *MockEtcdMockRecorder
}

// MockEtcdMockRecorder is the mock recorder for MockEtcd.
type MockEtcdMockRecorder struct {
	mock *MockEtcd
}

// NewMockEtcd creates a new mock instance.
func NewMockEtcd(ctrl *gomock.Controller) *MockEtcd {
	mock := &MockEtcd{ctrl: ctrl}
	mock.recorder = &MockEtcdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEtcd) EXPECT() *MockEtcdMockRecorder {
	return m.recorder
}

// AlertingRules mocks base method.
func (m *MockEtcd) AlertingRules() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlertingRules")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlertingRules indicates an expected call of AlertingRules.
func (mr *MockEtcdMockRecorder) AlertingRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertingRules", reflect.TypeOf((*MockEtcd)(nil).AlertingRules))
}

// Deploy mocks base method.
func (m *MockEtcd) Deploy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockEtcdMockRecorder) Deploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockEtcd)(nil).Deploy), arg0)
}

// Destroy mocks base method.
func (m *MockEtcd) Destroy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockEtcdMockRecorder) Destroy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockEtcd)(nil).Destroy), arg0)
}

// InitiateCopyOperation mocks base method.
func (m *MockEtcd) InitiateCopyOperation(arg0 context.Context, arg1 kubernetes.PodExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateCopyOperation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitiateCopyOperation indicates an expected call of InitiateCopyOperation.
func (mr *MockEtcdMockRecorder) InitiateCopyOperation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateCopyOperation", reflect.TypeOf((*MockEtcd)(nil).InitiateCopyOperation), arg0, arg1)
}

// IsBackupCopied mocks base method.
func (m *MockEtcd) IsBackupCopied(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBackupCopied", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBackupCopied indicates an expected call of IsBackupCopied.
func (mr *MockEtcdMockRecorder) IsBackupCopied(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBackupCopied", reflect.TypeOf((*MockEtcd)(nil).IsBackupCopied), arg0)
}

// IsCopyOperationInitiated mocks base method.
func (m *MockEtcd) IsCopyOperationInitiated(arg0 context.Context, arg1 kubernetes.PodExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCopyOperationInitiated", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCopyOperationInitiated indicates an expected call of IsCopyOperationInitiated.
func (mr *MockEtcdMockRecorder) IsCopyOperationInitiated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCopyOperationInitiated", reflect.TypeOf((*MockEtcd)(nil).IsCopyOperationInitiated), arg0, arg1)
}

// ScrapeConfigs mocks base method.
func (m *MockEtcd) ScrapeConfigs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapeConfigs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapeConfigs indicates an expected call of ScrapeConfigs.
func (mr *MockEtcdMockRecorder) ScrapeConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapeConfigs", reflect.TypeOf((*MockEtcd)(nil).ScrapeConfigs))
}

// ServiceDNSNames mocks base method.
func (m *MockEtcd) ServiceDNSNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceDNSNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ServiceDNSNames indicates an expected call of ServiceDNSNames.
func (mr *MockEtcdMockRecorder) ServiceDNSNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDNSNames", reflect.TypeOf((*MockEtcd)(nil).ServiceDNSNames))
}

// SetBackupConfig mocks base method.
func (m *MockEtcd) SetBackupConfig(arg0 *etcd.BackupConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBackupConfig", arg0)
}

// SetBackupConfig indicates an expected call of SetBackupConfig.
func (mr *MockEtcdMockRecorder) SetBackupConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackupConfig", reflect.TypeOf((*MockEtcd)(nil).SetBackupConfig), arg0)
}

// SetHVPAConfig mocks base method.
func (m *MockEtcd) SetHVPAConfig(arg0 *etcd.HVPAConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHVPAConfig", arg0)
}

// SetHVPAConfig indicates an expected call of SetHVPAConfig.
func (mr *MockEtcdMockRecorder) SetHVPAConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHVPAConfig", reflect.TypeOf((*MockEtcd)(nil).SetHVPAConfig), arg0)
}

// SetSecrets mocks base method.
func (m *MockEtcd) SetSecrets(arg0 etcd.Secrets) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSecrets", arg0)
}

// SetSecrets indicates an expected call of SetSecrets.
func (mr *MockEtcdMockRecorder) SetSecrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecrets", reflect.TypeOf((*MockEtcd)(nil).SetSecrets), arg0)
}

// SetSourceBackupConfig mocks base method.
func (m *MockEtcd) SetSourceBackupConfig(arg0 *etcd.BackupConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSourceBackupConfig", arg0)
}

// SetSourceBackupConfig indicates an expected call of SetSourceBackupConfig.
func (mr *MockEtcdMockRecorder) SetSourceBackupConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSourceBackupConfig", reflect.TypeOf((*MockEtcd)(nil).SetSourceBackupConfig), arg0)
}

// Wait mocks base method.
func (m *MockEtcd) Wait(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockEtcdMockRecorder) Wait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockEtcd)(nil).Wait), arg0)
}

// WaitCleanup mocks base method.
func (m *MockEtcd) WaitCleanup(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitCleanup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitCleanup indicates an expected call of WaitCleanup.
func (mr *MockEtcdMockRecorder) WaitCleanup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitCleanup", reflect.TypeOf((*MockEtcd)(nil).WaitCleanup), arg0)
}
